module counter8(clk, rst, cnt);
    input clk, rst;
    output reg [7:0] cnt;

    always @(posedge clk or posedge rst) begin
        if (rst) begin
            cnt <= 8'b0000_0000;
        end
        else begin
            cnt <= cnt + 1;
        end
    end
endmodule

module bin2bcd(clk, rst, bin, bcd_out);
    input clk, rst;
    input [7:0] bin;
    reg [11:0] bcd;
    output reg [11:0] bcd_out;
    reg [3:0] i;

    always @(posedge clk or posedge rst) begin
        if (rst) begin
            bcd <= 12'd0;
            i <= 4'd0;
        end
        else begin
            if (i < 8) begin
                if (bcd[3:0] >= 5) bcd[3:0] <= bcd[3:0] + 3;
                if (bcd[7:4] >= 5) bcd[7:4] <= bcd[7:4] + 3;
                if (bcd[11:8] >= 5) bcd[11:8] <= bcd[11:8] + 3;

                bcd <= {bcd[10:0], bin[7-i]};
                i <= i + 1;
            end
        end
    end

    always @(posedge clk or posedge rst) begin
        if (rst) begin
            bcd_out <= 12'd0;
        end
        else if (i == 8) begin
            bcd_out <= bcd;
        end
    end
endmodule

module seg7_controller(clk, rst, bin, seg_data, seg_sel);
    input clk, rst;
    input [7:0] bin;

    wire [11:0] bcd;
    reg [3:0] display_bcd;

    output reg [7:0] seg_data;
    output reg [7:0] seg_sel;

    bin2bcd b1(clk, rst, bin, bcd);

    always @(posedge clk or posedge rst) begin
        if (rst) begin
            seg_sel <= 8'b11111110;
        end
        else begin
            seg_sel <= {seg_sel[6:0], seg_sel[7]};
        end
    end

    always @(*) begin
        case(seg_sel)
            8'b11111110: display_bcd = bcd[3:0];
            8'b11111101: display_bcd = bcd[7:4];
            8'b11111011: display_bcd = bcd[11:8];
            default:     display_bcd = 4'b0000;
        endcase
    end

    always @(*) begin
        case (display_bcd)
            0: seg_data = 8'b11111100;
            1: seg_data = 8'b01100000;
            2: seg_data = 8'b11011010;
            3: seg_data = 8'b11110010;
            4: seg_data = 8'b01100110;
            5: seg_data = 8'b10110110;
            6: seg_data = 8'b10111110;
            7: seg_data = 8'b11100000;
            8: seg_data = 8'b11111110;
            9: seg_data = 8'b11110110;
            default: seg_data = 8'b00000000;
        endcase
    end
endmodule

module LED_control(clk, rst, bin, seg_data, seg_sel, led_signal);
    input clk, rst;
    input [7:0] bin;
    
    wire [7:0] cnt;
    
    output [7:0] seg_data;
    output [7:0] seg_sel;
    output reg led_signal;

    counter8 c1(clk, rst, cnt);
    seg7_controller s1(clk, rst, bin, seg_data, seg_sel);

    always @(posedge clk or posedge rst) begin
        if (rst) begin
            led_signal <= 0;
        end
        else begin
            if (cnt <= bin) begin
                led_signal <= 1;
            end
            else begin
                led_signal <= 0;
            end
        end
    end
endmodule


//////////////////////////////////##아래는 tb####////////




`timescale 1ns / 1ps

module tb_LED_control;

    reg clk;
    reg rst;
    reg [7:0] bin;

    wire [7:0] seg_data;
    wire [7:0] seg_sel;
    wire led_signal;

    LED_control dut (
        .clk(clk),
        .rst(rst),
        .bin(bin),
        .seg_data(seg_data),
        .seg_sel(seg_sel),
        .led_signal(led_signal)
    );

    initial begin
        clk = 0;
    end
    always #500 clk = ~clk;

    initial begin
        rst = 1;
        bin = 0;
        #2000;
        rst = 0;
        
        $monitor("%8.1f   | %-7s | %-14d | %b", $time/1000.0, get_brightness_str(bin), bin, led_signal);

        bin <= 8'd0;
        #512000;

        bin <= 8'd63;
        #512000;

        bin <= 8'd127;
        #512000;

        bin <= 8'd191;
        #512000;

        bin <= 8'd255;
        #512000;

        $finish;
    end

    function [55:0] get_brightness_str;
        input [7:0] ref_val;
        begin
            case(ref_val)
                8'd0:   get_brightness_str = "0%";
                8'd63:  get_brightness_str = "25%";
                8'd127: get_brightness_str = "50%";
                8'd191: get_brightness_str = "75%";
                8'd255: get_brightness_str = "100%";
                default: get_brightness_str = "N/A";
            endcase
        end
    endfunction

endmodule
